---
- name: SETUP NETWORK TO CONFIG INTRANET
  hosts: localhost
  connection: local
  become: yes                                 # Habilita o super usuario

  vars:
    _allowed_envs:
      - dev
      - preprod
      - prod
    conf_file: intranet.yml
    expl_file: model/intranet.yml.example

  vars_prompt:

    - name: interface
      prompt: Interface to configure. To see available interfaces, run "ip a"
      private: no

    - name: ip_address
      prompt: IP address to fix on interface. Example 10.10.10.1/24 or 192.168.256.100/32
      private: no
  
  pre_tasks:
    - name: Make sure ip_address is valid
      fail:
        msg: >-
          Interface isn't formated correctly. Example 10.10.10.1/24 or 192.168.256.100/32
      when: not ip_address is regex('^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(?:/[0-9]{2})$')
      run_once: true

  tasks:
    - name: UPDATE SYSTEM
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 8640
    
    - name: SET DEFAULT INTERFACE
      set_fact:
        default_interface: "{{interface}}"
    
    - name: SET DEFAULT IP
      set_fact:
        default_ip: "{{ip_address}}"
  
    - name: GETING INTERFACES
      shell: ls -l /sys/class/net/ | grep -v virtual | awk -F " " '{print $9}' | sed 's/{{default_interface}}//' | sed '/^[[:space:]]*$/d' 
      register: interface_DHCP

    - name:
      set_fact:
        interfaces_list: "{{interface_DHCP.stdout}}"

    - name: GENERATE CONFIG INTERFACES FILE
      shell: cp {{expl_file}} {{conf_file}}
      
    - name: "SAVE CONFIG TO {{conf_file}}"
      ansible.builtin.replace:
        path: "{{conf_file}}"
        regexp: "intranet_interface"
        replace: "{{default_interface}}"

    - name: 
      ansible.builtin.replace:
        path: "{{conf_file}}"
        regexp: "intranet_ip"
        replace: "{{default_ip}}"

    - name: 
      ansible.builtin.replace:
        path: "{{conf_file}}"
        regexp: "dhcp_interface"
        replace: "{{interfaces_list}}"

    - name: COPY FILE CONFIG TO /etc/netplan
      shell: cp {{conf_file}} /etc/netplan

    - name: APPLY CONFIG FROM /etc/netplan/intranet.yml
      shell: netplan apply

    - name: ENABLE IPV4 FORWARD 
      shell: echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf

    - name: INSTALL IPTABLES
      shell: yes 'yes' 'yes'  | apt-get install iptables-persistent
    
    - name: SETING IPTABLES CONFIG
      shell: iptables -t nat -A POSTROUTING -j MASQUERADE

    - name: APPLY IPTABLES CONFIG
      shell: iptables-save > /etc/iptables/rules.v4

    - name: REMOVE OLD FILE FROM DNS CONFIG
      shell: rm -f /etc/resolv.conf

    - name: SETING NEW DNS FILE CONFIG
      shell: ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf

    - name: PING TEST - ping google.com -c 5
      shell: ping google.com -c 5

    - name: REMOVING TEMP FILES
      shell: rm -f {{conf_file}}

    - name:
      debug: msg="YOU MUST REBOOT SYSTEM TO APPLY CONFIGURATION"